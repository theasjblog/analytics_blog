{
  "hash": "e9dc80378c950cbf19851e657fc8997b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny reactivity visualizer\"\ndescription: \"Optimize your Shiny apps by understanding the reactivity graph.\"\ndate: \"2023-08-11\"\ncategories: [r, shiny]\n---\n\n\n![Photo by Valery Fedotov on Unsplash](img/cover.jpg)\n\nShiny dashboard works because of something called reactivity. When something changes, everything else linked to it changes as well: it “reacts” to the changes.\n\nFor instance, let’s look at the `01_hello` example in Shiny documentation, which we can start using the command `runApp(system.file(\"examples/01_hello\", package = \"shiny\"))`.\n\nWhenever we change the number of bins, the appearance of the plot changes. The plot “reacts” to the number of bins.\n![(A) The plot has 30 bins. When we change the number of bins to 5 (B), the plot “reacts” to the change.](./img/00.png)\n\n\n\nThis is extremely powerful. It is this that allows us to build complex dashboards that can display different outputs based on the users’ interactions, making a significant step forward from a static report.\n\nHowever, with great powers come great responsibilities. Apps that have a lot of interconnected reactivity connections can become slow and unresponsive while all the UI elements are refreshed.\n\nIn some apps, you will also see that the UI refreshes several times at start up, even before the app settles to a ready state where users can interact with it.\n\nThese are examples of reactivity gone out of control. Too many things refresh too often.\n\nInvestigating the reactivity chain for a Shiny app can be a complex task. The larger the app, the harder it is.\n\nLuckily, there is a great tool that makes this job quite easy: `{reactlog}`.\n\n`{reactlog}` has [excellent documentation](https://rstudio.github.io/reactlog/), one of the best I have ever seen. I strongly suggest you go over it to fully understand how it works.\n\nToday, we will simply cover the basics. My goal is not to teach you all the details of the package and of Shiny reactivity, but rather to share another great tool you can add to your Shiny developer’s arsenal.\n\nBefore we start, let’s agree on some terminology. Let’s use the convention used by `{reactlog}`, which is also the same one used in the book [Mastering Shiny](https://mastering-shiny.org) by Hadley Wickham.\n\n![A reactivity plot made by reactlog. Note that information flows left (inputs) to right (outputs). Note also that there are different states each component can be in: ready, calculating, invalidating, and invalidated. In this chart, all components are in the ready state.](./img/01.png)\n\nEach of the components of the app (inputs, outputs, observers, etc.), is represented by a shape. Simplifying a little bit, we can think of information going from left (inputs) to right (outputs) following the arrows that connect interdependent components.\n\nFinally, each component can be in one of these four states:\n\n* **Ready**: items in ready state, not computing anything, just sitting and waiting for something new to happen. For example, a plot that just finished refreshing after the user changed some inputs.\n* **Invalidating/Invalidated**: items that are (or are in the process of becoming) invalidated. For example, the plot after the user changed some inputs, but before the plot itself is refreshed.\n* **Calculating**: items that have just been invalidated, and are actively being recalculated so that they can reach the ready state again.\n\nLet’s put everything in practice with a simple example. We’ll use one of the Shiny app that comes built-in into the `{shiny}` package: `03\\reactivity`.\n\nLet’s start the `{reactlog}` engine and the Shiny app.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)  \nlibrary(reactlog)  \n  \n# tell shiny to log all reactivity  \nreactlog_enable()  \n  \n# run a shiny app  \napp <- system.file(\"examples/03_reactivity\", package = \"shiny\")  \nrunApp(app)\n```\n:::\n\n\n\nWith the app open, let’s make a few changes:\n\n* **Caption** to _“hello”`_.\n* **Choose the dataset** _“pressure”_.\n* Set the **Number of observations** to _15_.\n\nNow we can close the app and explore the reactivity log.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# once app has closed, display reactlog from shiny  \nshiny::reactlogShow()\n```\n:::\n\n\n\nThe chart opens up with the app in ready state, after the initial flush. If we want to examine the app startup, we can simply use the left arrow in the navigation bar to move back in time.\n\n![App 03\\reactivity in ready state. Note that we can navigate back in time before the initial flush by using the navigation bar at the top.](./img/02.png)\n\nThe first thing we changed was the _“Caption”_. The reactivity chart shows us that the input became invalid (1), and that caused the UI text to become invalid as well (2). Following that, the UI text is re-calculated by fetching the new value of the input (3). After this, the app is in a ready state again (4).\n\n![Stages of refreshing a UI element. (1) The input gets modified by the user, so shiny invalidates it. (2) The connected output is invalidated (2). The output gets re-calculated using the new input (3). The app is in the ready state again (4).](./img/03.png)\n\nThe next thing we did was to change the dataset used. This change caused a lot more components to become invalid. The summary table and the data table both depend on the source data, so they need to become invalid.\n\n![Changing the input dataset to pressure caused an intermediate observer to be invalidated together with the two outputs summary and view.](./img/04.png)\n\nOnce again, when all connected items are invalidated, they will be re-calculated and the app eventually reaches the ready state.\n\nFinally, we changed the number of rows to be displayed. This action only invalidates the dataset view, which is quickly re-calcualted to bring us back to the ready state.\n\n![Changing the input to display a different number of rows invalidates the table view output, but not the dataset itself: we did not change the underlying data.](./img/05.png)\n\n\n### Conclusions\n\nThis is it. The package is this simple to use, yet so powerful. The recommendation I have is to spend some time exploring your reactivity chart in depth, to fully understand what causes parts of the app to be re-calculated. The more you can simplify the reactivity tree, the more responsive your app can be.\n\nAnother benefit of simplifying the reactivity tree is that your app will be easier to maintain and enhance. You will likely end up with fewer interconnected items that will create cognitive load when a new developer needs to read and understand the app.\n\nOnce again, I strongly advise you to have a good read of the [excellent documentation](https://rstudio.github.io/reactlog/articles/reactlog.html) for the `reactlog` package. If you don’t end up using the package, at least you’ll have a very good idea on how to write documentation for your own work.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}