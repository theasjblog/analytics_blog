{
  "hash": "9dadd951eb70af9b10a889b09cd6e4ed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple renv virtual environment in R\"\ndescription: \"How to easily switch between different renv libraires within the same project.\"\ndate: \"2023-07-17\"\ncategories: [\"r, renv\"]\n---\n\n\n![Photo by Luisa Brimble on Unsplash.](./img/cover.jpg)\n\n### What we will learn today\n\n> To set up multiple `renv.lock` files within the same project.\n\nWe want a low-effort solution that seamlessly allow us to:\n\n*   Switch between different `renv.lock` files depending on some environment variable\n*   Not having to reinstall the whole `renv.lock` library every time we switch project.\n\n### renv\n\n`{renv}` [is an essential package](../2022-07-22_renv_r_env_reproducible/index.qmd) for everyone working with R. It allows to create an isolated library of packages that is accessible only to your project. This is vital to ensure reproducibility and to facilitate collaboration.\n\n`{renv}` will record the packages you need and their versions in a file called `renv.lock`. The challenge we are overcoming today is that `{renv}` officially supports only [one renv.lock for each project](https://github.com/rstudio/renv/issues/253). This is not a bad decision, but there are scenarios where you might need to switch between multiple `renv.lock`. For example:\n\n* You work on multiple systems (Windows, MacOs, Linux).\n* You need to make sure your work is compatible with different versions of R.\n* You want to have deployments in different target environments from the same codebase.\n\n`{renv}` developers maintain that users are responsible for dealing with these scenarios, not `renv`. Although I agree with the principle here, I still wanted to find a way to do so easily without duplicating code bases, creating multiple branches, or anything like that.\n\n### renv start up\n\nWhen you start an R session within a `{renv}` project, R will first source the `.Rprofile` file. `.Rprofile` then sources `renv/activate.R`. This is a very long file that does several things. In extreme summary:\n\n* It verifies that `{renv}` is installed.\n* It verifies `renv.lock`.\n* It executes `renv::status()`.\n\nIf we examine `renv/activate.R` and the `renv` source code we realize that paths are handled with `Sys.getenv()`.\n\nFor example, the function `renv:::renv_paths_lockfile` checks for the global variable `RENV_PATHS_LOCKFILE`. If this is unset (the default), then it will return `renv.lock` as the path for the lock file. This is the default behaviour we want to alter.\n\nNow that we know this, the solution to our problem is quite simple. All we need to do is to make a small change the `.Rprofile`.\n\n### Switch between different renv.lock\n\nLet’s consider the case where we want different versions of the lock file for different versions of R. Here is one way we could achieve this in the `.Rprofile`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# .Rprofile  \nif(R.Version()$major == '4'){  \n  Sys.setenv(RENV_PATHS_LOCKFILE = 'renv_R4.lock')  \n} else if (R.Version()$major == '3'){  \n  Sys.setenv(RENV_PATHS_LOCKFILE = 'renv_R3.lock')  \n} else {  \n  stop('Usupported version of R. Must be \"3\" or \"4\".')  \n}  \n  \nsource(\"renv/activate.R\")\n```\n:::\n\n\n\nThis modification will use two different `renv.lock` depending on the major version of R loaded. We specify the `renv.lock` file to use by setting the global variable `RENV_PATHS_LOCKFILE`. If we use R 4.x.x, then the file `renv_R4.lock` will be used, if we use R 3.x.x then the file `renv_R3.lock` will be used.\n\nThis is everything we need to do. From now on, every call to `renv::snapshot()` and `renv::restore()` will refer to our special version of `*.lock`, and not the default one.\n\n> Remember that to switch between `renv.lock` files you need to restart the R session, so that the `.Rprofile` is re-executed.\n\n### Dependencies on .Rprofile\n\nLet’s consider a slightly more complex example. Suppose we have two `renv.lock` we want to use, one for a dev environment and one for a test environment. We can write a `.Rprofile` like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# config.yml  \ndefault:  \n  renvLockPath: 'renv_dev.lock'  \ntest:  \n  renvLockPath: 'renv_test.lock'  \n  \n# .Rprofile  \n# NOTE: We might not want to forcefully install a package in somebody's  \n# system. We could stop the script here and ask the users to install config  \n# themselves  \nutils::install.packages('config', repos = 'https://cloud.r-project.org')  \n  \n# set the correct renv.lock  \nSys.setenv(RENV_PATHS_LOCKFILE = config::get('renvLockPath'))  \n  \nsource(\"renv/activate.R\")\n```\n:::\n\n\n\nWith this implementation we created a dependency on the `{config}` [package](../2022-08-17_config_r/index.qmd). When the code executes, we need to make sure `{config}` is available to R. So, the first thing we do is to install it. If you prefer to let the user install the package himself, you can fail the script here with a `stop()` statement.\n\nBecause `renv` is not active yet, `{config}` will be installed in the R shared library.\n\nNote that we need to specify that we want to use `install.packages` from `utils`, otherwise R might use the one from `renv:shims`, which will fail because `{renv}` is either not available or not activated yet.\n\n### What about restoring the library?\n\nEvery `renv.lock` will record different packages and/or different versions for the same package. For example, we might use `{dplyr}` 1.1.0 in one `renv.lock`, but `{dplyr}` 1.2.0 in another one.\n\nWhen we switch `renv.lock`, `renv` might warn us that the library is not in sync with the `renv.lock` and it will want to re-install the correct version of `{dplyr}` by using `renv::restore()`.\n\nThis happens when the `renv.lock` files share the same library inside `renv/library`. It does not happen if you are using different versions of R or different operative systems, as these libraries will use different subfolders within `renv/library`, but it will happen if you are testing something without changing version of R or operative system. For example, if you are testing upgrading some dependencies.\n\nRestoring the library is not a big deal, and `{renv}` makes it fast by using its cache. However, it is an unnecessary step that we can avoid.\n\nHere is a modified `.Rprofile` that solves the problem.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# config.yml  \ndefault:  \n  renvLockPath: 'renv_dev.lock'  \n  renvLibraryPath: 'renv_dev'  \ntest:  \n  renvLockPath: 'renv_test.lock'  \n  renvLibraryPath: 'renv_test'  \n  \n# .Rprofile  \n# NOTE: We might not want to forcefully install a package in somebody's  \n# system. We could stop the script here and ask the users to install config  \n# themselves  \nutils::install.packages('config', repos = 'https://cloud.r-project.org')  \n  \n# set the correct, unique renv library  \nSys.setenv(RENV_PATHS_LIBRARY = file.path(getwd(),   \n                                          'renv',  \n                                          'library',  \n                                          config::get('renvLibraryPath')))  \n  \n# set the correct renv.lock  \nSys.setenv(RENV_PATHS_LOCKFILE = config::get('renvLockPath'))  \n  \nsource(\"renv/activate.R\")\n```\n:::\n\n\n\nWhat we did was adding a line to modify the global variable `RENV_PATHS_LIBRARY`. This variable is used by `{renv}` to record where the library is located. By default it is not set, which `renv` then associates to the `renv/library` path. By setting a specific path dynamically, we can use diffirent libraries for different `renv.lock` files.\n\n### Is there any other option?\n\nIt depends. If you are targeting a production environment within an organization you might want to consider using Docker or similar container-based solutions. In this way, you will not to have to worry about different versions or R or different operative systems. A container will ensure that the R development environment is an -almost- exact replica of the production R environment.\n\nIf instead you want to develop something like an R library or a Shiny app that a user can download and run on his own R session, then you must try to cover as many cases as possible. In this scenario, having a way to quickly switch between different R libraries can make your job of testing different runtime environments faster.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}