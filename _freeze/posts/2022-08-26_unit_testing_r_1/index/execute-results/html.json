{
  "hash": "48bdd9508cc69f6c4b88cfc8339a0624",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Everything you want to know about unit testing in R - Part 1\"\ndescription: \"Your survival guide to unit testing, test fixtures, mocking, and coverage in R.\"\ndate: \"2022-08-26\"\ncategories: [r, tetthat, testing]\n---\n\n\n![](img/cover.png)\n\n\n\n**In this first part**\n\n* Introduction to testing\n* testthat\n* Helper functions\n\n# Introduction\n\nTesting is an essential part of coding. It should be part of your daily routine, regardless of your job title. You write code, you test code. Simple as that. Unless you do test driven development. Then for you it is “you test code, you write code”. Still, you test.\n\n## Types of testing\n\nThere are many different types of testing. To add to the confusion, different people call the same type of testing in different ways. Here is a quick overview of the convention I use:\n\n* **Unit testing**. Is each of your functions working as expected?\n* **Regression testing**. After you have modified your code base (i.e. a bug fix), is your code still returning the same expected results?\n* **Integration testing**. Is your code talking with other components, i.e. log servers or databases?\n* **Load testing**. Is your code working under load, i.e. when many users are running it?\n* **Performance testing**. Is your code fast enough?\n* **Penetration testing**. How secure is your code against malicious attempts to run it?\n\nToday I will focus on unit testing, which is the most common type of testing you will be doing as a developer. Also, I will look at how to test “traditional” R code: scripts and packages. Other applications such as API and Shiny use special tools that I will cover in the future.\n\n## Why testing?\n\n::: {.callout-note appearance=\"simple\"}\nCode that has not been tested is code that does not work\n:::\n\nI get asked “why testing” more often then you might think. After all, while you develop your code, you do some informal testing to make sure it runs. If you develop mathematical models, you spend hours validating them. So, why waste time writing formal unit tests?\n\nHere are three of the main reasons:\n\n1. Tests are a form of documentation. Tests are explicit representation of the code’s expected behaviour.\n2. Test the sad path. When you are in developer mode, you check that your code works as expected when it receives the inputs it expects. This is called testing the happy path. But when you test, you need to change your mindset. Now you are asking yourself: “how can I break this code”. The easiest way is to break assumptions. What if you pass a negative value? What if you pass a string rather than a vector? What if a global variable is missing? This is the sad path. You will need to test both the happy path and the sad path.\n3. Code that has not been tested, is code that does not work.\n\nOf course, tests are not a cure-it-all remedy. Your code will still fail despite your tests. Tests cannot prove that our code works. They can only prove that it does not fail.\n\n\n# Testing prerequisites\n\nStart by setting up your code base. This is not mandatory, but I strongly recommend you do it. I already covered the R set up in [this article](/posts/2022-07-13_setup_r_for_success/index.html). Briefly, here’s your checklist.\n\n* Create an RStudio project.\n* Put R code in a folder called R.\n* Put tests Tests in a folder called tests/testthat.\n* Create a `tests/testthat.R` file. You can create this file and the test folders by running use `this::use_testthat()`.\n* `DESCRIPTION` file (optional).\n* `NAMESPACE` file (optional)\n\n```bash\n.\n├── demoTests.Rproj\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   └── myNewFunction.R\n└── tests\n   ├── testthat.R\n   └── testthat\n       └──test-myNewFunctions.R\n```\n\nNote that, for clarity, I omitted some extra stuff you should have in your project: `.gitignore`, `renv.lock`, `vignette`, `README`.\n\n# Testing in R: testthat\n\n`testthat` is the package to use to run unit tests in R. Let’s start by looking at the basic functionalities.\n\nOf course, you need to have a function to test.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This function goes in a file inside the R folder.\n\n#' sumNumbers\n#' @description Return the sum of two numbers or vectors\n#' @param a Numeric\n#' @param b Numeric\n#' @return A numeric\nsumNumbers <- function(a, b){\n  return(a+b)\n}\n```\n:::\n\n\n\n\nNow you want to create a test. To do that, create a file inside tests/testthat, and use the prefix `test-`. I like to call my test file with the same name as the file where my tested functions are, for instance `test-sumNumbers.R`.\n\nNext, you can write tests like these.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"sumNumbers\",{\n  expect_equal(foo1(2,3), 5)\n  expect_equal(foo1(c(2, 8), c(3, 1)), c(5, 9))\n  expect_error(foo1(2,'a'))\n})\n```\n:::\n\n\n\nLet’s decipher the tests.\n\n* The `test_that()` function contains the tests. You can group tests as you want. I suggest creating small groups: either tests related to a single function, or to a single logic unit of your code.\n* The first thing inside `test_that()` is a string. This is a free text string. Use it to identify what you are testing, and any other details that might be useful to developers. This string appears in your test results and it will help you to identify where you have test failures.\n* `expect_*`. The basic idea behind any test is to check the output of a piece of code against an expectation. In testthat you define expectation using the expect_*() functions. If your code matches the expectation, the test passes. There are several built-in expectations: expect_equal, expect_true, expect_false, expect_error, expect_message, and many more. Check the testthat documentation to find the one you need.\n\nYou can run the tests in many different ways. Just a few are:\n\n* `testthat::test_local()` from the console. Run all test files.\n* Click on `Run tests` on top of the test file. Run only the opened test file.\n* Some `devtools` and `covr` calls trigger tests.\n* `R CMD CHECK`\n.\nAnd this is it really. At its core, this is all you need to use testthat.\n\n## Helper functions\n\nNow that you know the basics, let’s complicate things a bit. Suppose you have this function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' summaryDataFrame\n#' @description Summaries sales dataframes\n#' @param df A dataframe with a column \"seller\" and a column \"sales\". \n#' \"sales\" must be numeric\n#' @return An array\nsummaryDataFrame <- function(df){\n  return(tapply(df$sales, df$seller, sum))\n}\n```\n:::\n\n\n\nThis function expects data in a specific format. To test it, we need to create that data. We can do that by using a helper function. Helper functions can be created in a file inside `tests/testthat`, with the prefix `helper-`. When you run the tests, testthat will automatically run all files in `tests/testthat` in alphabetical order. This means that `helper-` files are sourced before `test-` files so that helper functions are available to the test environment.\n\nNote that `testthat` documentation recommends against `helper-` files. The advice is to put helper functions into the R folder. The reason for this is that the R folder is sourced before the tests anyway, so the result would be the same. I disagree with this advice. Code that is used only for tests should stay as close as possible to the tests, and not the business logic (the R folder). So I prefer to put test helper functions in the testthat folder, not the R folder.\n\nLet’s create a helper function to produce the right testing data for the function summaryDataFrame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' createSellerData\n#' @description The function summaryDataFrame requires a dataframe with a \n#' sales and a seller columns. Sales must be numeric. This function produces\n#' mock data for the function\n#' @return A data frame with two columns\ncreateSellerData <- function(){\n  df <- data.frame(sales = c(1,2,3,4,5,1),\n                   seller = c(rep('Joe', 3), rep('Jane', 3)))\n  return(df)\n}\n```\n:::\n\n\n\nNow you can write tests using the created data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"test summaryDataFrame using custom data\",{\n  # create mock data\n  inputDf <- createSellerData()\n  # call function\n  res <- summaryDataFrame(inputDf)\n  # expectations\n  expect_equal(res['Jane'], c('Jane'=10))\n  expect_equal(res['Joe'], c('Joe'=6))\n})\n```\n:::\n\n\n\n\nIt is easy to get carried away with helper functions. In my experience, if you need too many helper functions it is a sign that something is wrong with your code implementation. It is either too complex, or too coupled. If you have more helper functions than test code, you might want to consider refactoring your code. In our example, maybe we should abstract `summaryDataFrame()` to use two vectors as arguments, rather than a data frame.\n\n# Wrap up\n\nThis is it for this first part. I will explore mocking and test coverage on [part 2](/posts/2022-09-06_unit_testing_r_2/index.html).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}