{
  "hash": "31ea0a7304de46361d1537646267a7c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"An introduction to logging with examples in R\"\ndescription: \"Fundamental rules to define a logging strategy.\"\ndate: \"2023-05-17\"\ncategories: [\"r\"]\n---\n\n\n![Photo by Ibrahim Boran Unsplash.](./img/cover.jpg)\n\n\n### What you will learn\n\nYou will get an understanding of the principles of application logging and you will see some best practices applied to the R language.\n\n### Introduction\n\nLogging is a vital part of any application. From dashboards to API, from bash scripts to predictive models, everything should create logs. But what should we use to write logs? And what should we log?\n\nLet’s start by looking the purpose of logs.\n\n### Logs purpose\n\nWe can identify two main type of logs: technical logs and business logs.\n\n### Technical information\n\nTechnical logs are a developer tool. They are needed to help developers monitor and quickly debug their applications. These logs are useful only if they enable a quick response. Technical logs include:\n\n*   Execution time.\n*   Steps executed by the application.\n*   Error messages.\n*   Metadata such as version number, environment information, etc.\n\n### Business logs\n\nThis category of logs are often overlooked by developers. The input os business-side stakeholders is needed to capture business logs properly.\n\nWith business logs we capture metrics that allows the business, not the developers, to assess the value of the application.\n\nThe business metrics you must capture depends on the use case, but they might include:\n\n*   A model input and output.\n*   The click rate of specific buttons. For example a promotion button AND a buy button on an e-commerce website, so that we can calculate the efficacy of a campaign.\n\nWe are ready to get coding now. Let’s have a look at our options for logging.\n\n### Logging options\n\nThere are two main options used to log informations from an applications: print to console or use a dedicate library.\n\n### Print to console\n\nThis is the first form of logging many developers encounter: `print` or `cat`.\n\nThis approach might work while developing small applications locally, but it quickly gets out of hand.\n\nStatements that are only printed out to the console are rarely useful and reachable outside the dev session. What if we need to find a log entry from three days ago? How do we “browse” the console history?\n\nPrint to console should not be considered a viable logging option.\n\n### Dedicated libraries\n\nVirtually any programming language has dedicated logging libraries. In Python, the most used one is conveniently called `logging`. In R we can use `log4r`, `logging`, or `futile.logger`.\n\nI recommend you spend some time exploring those options and pick the one you are more comfortable with.\n\n### Best practices\n\nAt this point we know why we log, what to log, and what to use to log. It is time to look at some R code to consider some general good practices. I will use the `log4r` library simply because it is the one I am most familiar with, but identical results can be obtained with `logging` or `futile.logger`.\n\n### Consistency\n\nConsistent logs are easier to parse. If every time you write a solution, you use a different way of logging, then you will also need a different way to consume the logs. This will at least double your workload. Using a single logging framework will make sure everything is consistent across applications. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(log4r)\n\nlog\\_obj <- create.logger(logfile = here::here('logs', \"test.log\"),  \n                         level = \"DEBUG\")\n\ninfo(log\\_obj, 'info message')  \ndebug(log\\_obj, 'debug message')  \nerror(log\\_obj, 'error mssage')\n```\n:::\n\n\n\nWill produce this output:\n\n```\nINFO  \\[2023-04-26 19:51:30\\] info message  \nDEBUG \\[2023-04-26 19:51:30\\] debug message  \nERROR \\[2023-04-26 19:51:31\\] error mssage\n```\n\nHaving this consistent format is extremely important.\n\n### Format\n\nWe know our logs should be consistent, but what format should they have? Plain text `.log` files? `.csv`? Or maybe `.json`?\n\nHaving `.log` files with the content organized as we saw in the previous section is a _de facto_ standard, and there is nothing wrong with that.\n\nHowever, I recently started to leverage more and more the `.json` format. The reason is that logs created as JSON are extremely easy to parse by any application, no regex gymnastic involved.\n\nUsing `log4r` as an example, you could do something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)  \nlibrary(log4r)  \nlibrary(jsonlite)\n\n# define the path to the logging file  \nlog_file_path <- here::here('logs', \"test.log\")  \n\n# define the layout of the logs  \n# start by creating a list, then convert the list to   \n# JSON with jsonlite  \nmy_layout <- function(level, sessionID, message) {    \n  tmpList <- list(level = level,  \n                  timestamp = Sys.time(),  \n                  sessionID = sessionID,  \n                  message = message)  \n  return(paste0(jsonlite::toJSON(tmpList, auto_unbox = TRUE),  \n                '\\n'))# adding \\n for human readability  \n}\n\n# create the log onject  \nlog_obj <- create.logger(logfile = log_file_path,  \n                         level = \"DEBUG\")  \n# append the custom layout  \nlog_obj <- logger(appenders = file_appender(file = log_file_path,  \n                                            layout = my_layout))\n\ninfo(log_obj, '1234', 'info message')  \ninfo(log_obj, '5678', 'another info message')\n```\n:::\n\n\n\nThe output is something like this:\n\n\n\n::: {.cell}\n\n```{.json .cell-code}\n{\"level\":\"INFO\",\"timestamp\":\"2023-04-26 19:59:07\",\"sessionID\":\"1234\",\"message\":\"info message\"}  \n{\"level\":\"INFO\",\"timestamp\":\"2023-04-26 20:03:57\",\"sessionID\":\"5678\",\"message\":\"another info message\"}\n```\n:::\n\n\n\nThis file will be extremely easy to parse by any tool in any language.\n\n### Meaningful\n\nMany developers fails to create meaningful log messages. Often the messages created make sense while you are working on the app, but a few months after you moved to a different project you will not be able to remember what that messages mean.\n\nSimilarly, some developers just log the application error _as is_. The problem with this approach is that some libraries produces very cryptic messages. Adding some information and context will be very helpful.\n\nLet’s consider this example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)  \nlibrary(log4r)  \nlibrary(here)  \nlibrary(jsonlite)\n\nlog_file_path <- here::here('logs', \"test.log\")  \nmy_layout <- function(level, message) {  \n  tmpList <- list(level = level,  \n                  timestamp = Sys.time(),  \n                  message = message)  \n  paste0(jsonlite::toJSON(tmpList, auto_unbox = TRUE),  \n         '\\n')}\n\nlog_obj <- create.logger(logfile = log_file_path,  \n                         level = \"DEBUG\")\n\nlog_obj <- logger(appenders = file_appender(file = log_file_path,  \n                                            layout = my_layout))\n\ntryCatch({  \n  mtcars %>%  \n    select(hello)},   \n  error = function(e){  \n    error(log_obj, as.character(e))  \n})\n```\n:::\n\n\nWhich produces:\n\n\n\n::: {.cell}\n\n```{.json .cell-code}\n{\"level\":\"ERROR\",\"timestamp\":\"2023-04-26 20:17:20\",\"message\":\"[Error in `select()`: Can't subset columns that don't exist. Column `hello` doesn't exist.\"}\n```\n:::\n\n\n\nThis is not a bad starting point, but we can do better. We are capturing the essence of the message, but we are not giving any context. For example, which parts of the code actually originated this error? We can improve the message by working on the `tryCatch`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntryCatch({  \n  mtcars %>%  \n    select(hello)},   \n  error = function(e){  \n\t\terror(log_obj, 'function my_custom_function generated this error')  \n    error(log_obj, as.character(e))  \n})\n```\n:::\n\n\n\nWe are now providing context to the person that will need to debug this error. They will know exactly which part of the code base they should search. Always remember: the log entry must help a developer to debug the problem as quickly as possible. The more information you have, the better.\n\n### File size\n\nGenerally speaking, there are two approaches to creating logs: store every user session as an individual log file, or create a single log file, let’s say a daily one, and append to this file all the logs for that day. Which approach should we use? We need to consider our specific use case.\n\nLogging every session to its own file can create many files. You log-consumption process must be able to handle this scenario.\n\nOn the other hand, using a single log file can create conflicts if multiple sessions try to write to the same file at the same time. There is also higher risk of losing information if the file gets corrupted.\n\nYou will need to find the best solution that works for you. Keep in mind that there are compromises available. For instance, you could create one single file, but limit its size or number of records. Once the limit is reached, then create another file.\n\nSolving this sort of issues is where tools like the ELK stack really shine. They will manage this complex problem for you, with little to no set up.\n\n### Storage\n\nApplications can generate huge amount of log data. Storage is reasonably cheap, but still we cannot just dump gigabytes of logs every day to a server folder without a plan. There are not hard rules, but here are a couple of things to consider:\n\n*   Can you clean up logs with an automated routine job that transfer the content to a database or another appropriate long term storage?\n*   How often do you need to access the logs? Some logs are rarely read, maybe they are collected only to comply with some governance regulation. Those logs can be transferred to a so called cold storage. Cold storage is significantly cheaper than hot storage, but it will cost more to access the data. As a rule of thumb, Azure suggest to consider cold storage if you access your data less than once a month.\n\n### Security\n\nSome logs will record personal information (PII). You will need to check with your organization’s governance what the process is in this case, but generally you will have to encrypt the logs and store them in special locations. Good encryption libraries in R are `cyphr`, `sodium`, and `encryptr`.\n\n### What’s after the log\n\nThe final thing to consider is: “What to do with the logs”? To answer this question it is critical that you know what your organization has to offer to consume logs. Examples includes products such as the ELK stack, Splunk, Azure Monitor, and many more.\n\nJust make sure you know what your organization uses, then create logs and store them in a way that is easily accessible by the tool of choice.\n\nIf your organization does not have away to consume logs, you could build your own solution. Platforms like Posit’s workbench and rsconnect will make it easy. You can build a scheduled R Markdown to aggregate logs routinely, then a Shiny app to consume the logs. This will work, but it should also raise a red flag: it is an approach that is hardly scalable in large organizations, and it will require a dedicated team to build and maintain the solution.\n\nFinally, as a general rule of thumb, remember that technical logs should be monitored live, while business logs can be aggregated and monitored with a delayed scheduled. The amount of delay will depend on how business critical the application itself is, and how much it is used.\n\n### Wrap up\n\nIn this article we saw why logs are important. We then looked at a few general tips to deal with logs, and we used R to provide examples.\n\nIf there is one single takeaway I’d like you to remember, is that logs are so fundamental to the health of an applications, that they should be planned and executed with the same care and effort you put into every other aspect of the tool you are building. Talk with all the stakeholder to determine what information they need, find out how your organization consumes logs, and try to plug into those solutions rather than reinventing the wheel.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}