{
  "hash": "79bf08ce0a2235258df85c66bb719fc1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Make your own RStudio project template\"\ndescription: \"How to make sure everyone on your team is using the same blueprint.\"\ndate: \"2022-12-24\"\ncategories: [r, rstudio]\n---\n\n\n![A custom RStudio project template. Image by the author.](img/cover.png)\n\nOne of my favourite R packages is `{golem}`. With a few clicks, you can create a reproducible starting point for your Shiny app. Using a framework like `{golem}` is important in teams: it ensures that every developer starts from the same blueprint.\n\nAs a consultant I have worked with countless teams and every developer on each team works in their own way. This is particularly true in teams made by analysts rather than traditional developers. While on some occasions this can be acceptable, it makes it harder to share work between team members.\n\nHow can we standardize our R projects? The answer depends on what you do. If you use Shiny, then use `{golem}`. If you develop a package, then the structure of your workflow is defined by the standard design of an [R package](/posts/2022-07-13_setup_r_for_success/index.html).\n\nBut what if you have, for instance, a custom structure for an R Markdown report that you want to use as a reference for all your data analysis projects? You could store it in a shared folder and have your developers access it from there. You could have a dedicated repo to fork from. But you could also copy from `{golem}` and create your own RStudio project template.\n\nThe idea of using RStudio project templates is not new. RStudio has been supporting custom templates since version 1.1. However, I only recently came across their actual implementation. I thought there might be more developers out there who could benefit from using this with their team.\n\n## The basics\n\nThe basic idea behind a custom template is to create an R package according to some defined specifications. Once installed, this package will make the RStudio template available through the New Project wizard. To do this we need three ingredients:\n\n* A template.\n* A function to create your project template.\n* The file rstudioProjectTemplate.dcf.\n\n## The template\n\nFor the purpose of this guide, the aim of the template is irrelevant. We will use a simple template with an R Markdown report. The R Markdown report is a pretext. You can use anything you like to create your project template.\n\nWe will save the template into `./inst/<YOUR TEMPLATE>`.\n\n## The R Package\n\nAs expected, we are following the standard structure of an R package. Here is an overview with the important parts.\n\n```bash\n.\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   └── create_project.R\n└── inst\n    ├── rstudio\n    │   └── templates\n    │       └── project\n    │           ├── rmarkdown_icon.png\n    │           └── rstudioProjectTemplate.dcf\n    └── templatedemo\n        └── [...]\n```\n\nThe key elements are:\n\n* The R folder contains our logic to create the project.\n* The `./inst/templatedemo` folder contains a copy of our project template.\n* The `.inst/rstudio/templates/project/rstudioProjectTemplate.dcf` file contains the specification for the UI wizard.\n\n## The function to create the project\n\nThe function to create the project goes in the R folder. You must have this function, as it is the one picked up to initialize the template in the wizard. The function can have any name, as long as it matches what is specified in the Binding argument of the dcf file (see below). The first argument to this function must always be path. This will be the path where to create our new project. We will see later how we can define extra arguments.\n\nLet’s break down the main parts of this function.\n\n### The arguments\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_rmarkdown_project <- function(path, ...) {\n  # collect ellipsis arguments\n  dots <- list(...)\n  \n  # rest of the function below\n}\n```\n:::\n\n\n\nAs mentioned above, the first and only mandatory argument is path: we need to tell RStudio where we want to create the package. All other arguments can be specified, or passed as ellipsis `...`. We can use the syntax `dots <- list(...)` to collect all the unnamed arguments.\n\n### The logic\n\nThis function has all the logic needed by our template. In our specific case:\n\n* It copies the template from the template installation folder to the specified path.\n* It activates renv.\n* It installs dependencies.\n* It initializes a repo if requested\n* It adds some tracking info to the new project readme.\n\nYou can see the full code in the repository linked at the end of the article, but here are the main blocks.\n\n### Copy over the code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemoPath_sys <- function (..., lib.loc = NULL, mustWork = FALSE){\n  system.file(..., package = \"rstudiotemplate\", lib.loc = lib.loc, mustWork = mustWork)\n}\n\nfrom <- demoPath_sys(\"templatedemo\")\n\nfs::dir_copy(\n    path = from,\n    new_path = path,\n    overwrite = TRUE\n  )\n```\n:::\n\n\n\nWhen we install the package, the template is saved in the R library. Our `create_rmarkdown_project` function will copy the template from the R library to the location specified by the user.\n\n## Update references\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# main code to replace all references to templatedemo\nreplace_package_name(\n    copied_files,\n    basename(path),\n    path\n)\n\n# utility funciton to loop through all the files we need to make replacements in\nreplace_package_name <- function(copied_files,\n                                 package_name,\n                                 path){\n  # Going through copied files to replace package name\n  for (f in copied_files) {\n    copied_file <- file.path(path, f)\n\n    try({\n      replace_word(\n        file = copied_file,\n        pattern = \"templatedemo\",\n        replace = package_name\n      )\n    },silent = TRUE)\n  }\n}\n\n# utility funciton to make a replacement into a single file\nreplace_word <- function (file, pattern, replace){\n  suppressWarnings(tx <- readLines(file))\n  tx2 <- gsub(pattern = pattern, replacement = replace, x = tx)\n  writeLines(tx2, con = file)\n}\n\n# main code to replace all references to templatedemo\nreplace_package_name(\n    copied_files,\n    basename(path),\n    path\n  )\n```\n:::\n\n\n\nWhen we create the template, we put placeholders in place. For instance, in the `DESCRIPTION` file the name of the package is templatedemo. When a user creates a new project we replace all the placeholders with the actual name specified by the user. The snippet above accomplishes this. It gets a list of all files we copied over, then loops through them looking for the keyword templatedemo. The keyword is then replaced with the user’s new project name.\n\n## Other tasks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# activate renv if needed\nif(dots$useRenv){\n  renv::activate(project = getwd())\n}\n\n# if not needed, remove the .gitignore from the copied template\nif(!dots$createGitignore){\n  file.remove('.gitignore')\n}\n\n# add the specified environmetn to the .Renviorn file\naddEnvToRenviron(tolower(dots$chosenEnv))\n```\n:::\n\n\n\nIn the Wizard UI, we allow the user to specify a few more parameters. This part of the code takes actions based on the extra arguments: activate `renv`, use a `.gitignore`, register the `R_CONFIG_ACTIVE` variable.\n\n## The wizard UI\n\nHere is how our Wizard UI looks like.\n\n![Our Wizard UI. Image by the author.](img/wizard.png)\n\nThe “Directory name” and the “Create project as subdirectory of” fields are created by RStudio by default. Together they will form the path argument of our `create_rmarkdown_project` function.\n\nThe footer is also provided by RStudio. We do not need to worry about it.\n\nThe options we customised are the ones about the .gitignore, renv, and the “Choose the scope of the project”.\n\n### The dcf file\n\nThe wizard UI is defined into the rstudioProjectTemplate.dcf file. Let’s have a look at our dcf.\n\n```bash\nBinding: create_rmarkdown_project\nTitle: An awesome R Markdown Project Template\nOpenFiles: README.md\nIcon: rmarkdown_icon.png\n\nParameter: createGitignore\nWidget: CheckboxInput\nLabel: Create .gitignore\nDefault: On\nPosition: left\n\nParameter: useRenv\nWidget: CheckboxInput\nLabel: Use renv with this project\nDefault: On\nPosition: left\n\nParameter: chosenEnv\nWidget: SelectInput\nLabel: Choose the scope of the project\nFields: Production, Development, Test\nDefault: Development\nPosition: left\n```\n\nThe first few lines define some generic behaviour:\n\n* `Binding`: the function used to create the project.\n* `Title`: the title of the template, as displayed in the wizard.\n* `OpenFiles`: Once the new project opens, show this file in the new session.\n* `Icon`: An icon to display next to the title. Should be a png of 64 KB or less.\n\nThe lines below the Binding block define different elements of the UI wizard. We use the `CheckboxInput` and the `SelectInput`. Another option is the `TextInput`, which is a free text input that behaves like the \"Directory name” field. Each of these inputs has a `Parameter` argument. This is what will be used as extra arguments to the `create_rmarkdown_project()` function.\n\n## Conclusion\n\nThat is all. Really, it is this simple. Create an R package with the minimal structure defined above, install it, and you are good to go. Just use the New Project wizard and you have a reproducible project that all your team, or organization, can use.\n\nThanks for reading, and remember to follow me to get notified on new stories.\n\n## References\n\n* [Older medium article on the subject](https://medium.com/towards-data-science/using-rstudio-project-templates-to-help-the-project-standardization-in-data-science-teams-a963db12abac).\n* [Templates documentation](https://rstudio.github.io/rstudio-extensions/rstudio_project_templates.html).\n* [Repository for this project](https://github.com/theasjblog/rstudiotemplate).\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}