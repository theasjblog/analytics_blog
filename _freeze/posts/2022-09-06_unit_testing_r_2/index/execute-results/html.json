{
  "hash": "ba31723d83d722540519acf528b32373",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Everything you want to know about unit testing in R - Part 2\"\ndescription: \"Your survival guide to unit testing, test fixtures, mocking, and coverage in R.\"\ndate: \"2022-09-06\"\ncategories: [r, testthat, testing]\n---\n\n\n![](img/cover.png)\n\n**In this second part**\n\n* Test fixtures\n* Mocking\n* Test coverage\n\nYou can find part 1 [here]((/posts/2022-08-26_unit_testing_r_1/index.html)).\n\n# Test fixtures\n\n::: {.callout-note appearance=\"simple\"}\nTake nothing but memories, leave nothing but footprints.\n*― Chief Si’ahl*\n:::\n\nLet’s crank up the complexity a notch. Suppose you want to test things in your code that create files, or change global options or variables. When you do this, you want to clean up after yourself. You do not want to leave behind a pile of test files, or to change some global options that affect how you would normally use R.\n\nHow can we clean up after ourselves? The traditional approach is to use the `setup()` and `teardown()` functions from testthat. In recent releases, testthat recommends to replace those functions with test fixtures from the `withr` package. I agree. Test fixtures are a bit more complex to understand, but they are much cleaner.\n\nIn simple terms, when you work with `withr` you perform these steps:\n\n1. Link withr with a test or a funciton. This can be as simple as writing the withr call inside the function or the test.\n2. Instruct withr on what you need: i.e. create a file or change a global option.\n3. Run your code normally\n\n`withr` will take it from here. Once the function or test finishes, `withr` will clean up after itself. Any file created by `withr` will be deleted. Any global option changed by withr will be restored. And it will do that even if the function or the test fails with an error.\n\nEnough of theory, let’s see how to actually use withr’s test fixtures.\n\nIn this first example, you want to test a function that writes a file. Of course, you do not want to leave the file around after we run the tests. Here is the combination of the function and its test.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the fuction\n#' writeToFile\n#' @description Write a data frame to csv\n#' @param df the data frame\n#' @param pathFile the path to save the file to\\\n#' @return Nothing\nwriteToFile <- function(df, pathFile){\n  write.csv(df, file = pathFile)\n}\n\n# the test\ntest_that(\"writeToFile\",{\n  # tell withr that we want to create a file. The file must be deleted\n  # when tests are done\n  withr::local_file(here::here(\"file1.csv\"), {})\n  writeToFile(mtcars, here::here('file1.csv'))\n  # test that the file exists\n  expect_true(file.exists(here::here('file1.csv')))\n  # test that is has 32 rows (mtcars data frame)\n  expect_equal(foo2(here::here('file1.csv')), 32)\n})\n```\n:::\n\n\n\nThe function `withr::local_file()` creates the csv file. Once all the tests inside `test_that()` finish `withr` deletes the file. If we run `file.exists(here::here(\"file1.csv\"))` after the `test_that()` chunk, the result will be FALSE. This is important to remember: the file exists only while this `test_that()` runs, not while other tests are running. This guarantees that tests do not interfere with each other.\n\nLet’s try another example. Let’s say you have a function that prints some message to the console only if the global option `verbose` is TRUE (the default is FALSE).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' verboseFunction\n#' @description Output a message if isTRUE(getOption(\"verbose\"))\n#' @return NULL\nverboseFunction <- function(){\n  if(isTRUE(getOption(\"verbose\"))){\n    message('Running in verbose mode')\n  }\n  return(NULL)\n}\n```\n:::\n\n\n\nYou want to test that the function works with both `verbose` settings, but you do not want to affect the global value for `verbose`. You want its value to change only while the test is running. \n\nYou could do this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"verboseFunction\",{\n  # set option verbose to FALSE\n  options(verbose=FALSE)\n  expect_message(verboseFunction(), regexp = NA)\n  expect_null(verboseFunction())\n  \n  # set option verbose to TRUE\n  options(verbose=TRUE)\n  expect_message(verboseFunction(), 'Running in verbose mode')\n  expect_null(verboseFunction())\n  \n  # reset option verbose to default FALSE\n  options(verbose=FALSE)\n})\n```\n:::\n\n\n\nThis is a bad solution because it is not guaranteed that we reset the variables. If we have a failing test, the reset will not run.\n\nA better option is to use `withr`, which is guaranteed to run even in case of a failure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"verboseFunction\",{\n  # case for verbose = FALSE\n  withr::local_options(verbose=FALSE)\n  expect_message(verboseFunction(), regexp = NA)\n  expect_null(verboseFunction())\n  \n  # case for verbose = TRUE\n  withr::local_options(verbose=TRUE)\n  expect_message(verboseFunction(), 'Running in verbose mode')\n  expect_null(verboseFunction())\n})\n```\n:::\n\n\n\nIf you now run from the console `getOptions(\"verbose\")`, you will see that this is still the default FALSE. Your tests did not change the default settings you used.\n\n# Mocking\n\nOften our code depends on external components, like a database. It is not a good idea to have tests depending on external components. If you create a test dependency on a database, for example, you might start to see test failures caused by the database being offline, or a changed in the data. All these failures have nothing to do with your code.\n\nMocking removes these external dependencies. The easiest way to implement mocking is with the package mockery. In mockeryyou need to tell R which function you want to mock (aka stub the function), and provide a mocked output.\n\nLet’s say you have a function like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' getDataFromDb\n#' @description Query the database to get the max value of field mpg\n#' @param con A connection object\n#' @param queryStr A string with the query\n#' @return An integer\ngetDataFromDb <- function(con, queryStr){\n  res <- DBI::dbExecute(con, queryStr)\n  res <- max(res$mpg)\n  return(res)\n}\n```\n:::\n\n\n\nThis function takes in a connection object and a query string, executes the statement, and then returns the max in the column mpg. Incidentally, note that this is not great coding, as the function does two things. However, let’s use it for the sake of this demo.\n\nWhen you test this function you want control over the call to `DBI::dbExecute()`. You do not want to run an actual call to the database. Let’s create a mock function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to mock a database call. Always returns mtcars\nmockDbCall <- function(con, queryStr){\n    return(mtcars)\n  }\n```\n:::\n\n\n\nNote that this function mocks `getDataFromDb()`: it must have the same arguments, even if they are not used.\n\nOK, now you need to link `getDataFromDb()` with `mockDbCall()`. This is called creating a stub. To do this, you simply add a `stub` statement inside your testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"getDataFromDb\",{\n  # function to mock a database call. Always returns mtcars\n  mockDbCall <- function(con, queryStr){\n    return(mtcars)\n  }\n  mockery::stub(getDataFromDb, \"DBI::dbExecute\", mockDbCall)\n  expect_equal(getDataFromDb(NULL, 'hello'), 33.9)\n})\n```\n:::\n\n\n\nIn the context of the test, every time you call `getDataFromDb()` the internal call to `DBI::dbExecute()` is rerouted to `mockDbCall()`, which we have complete control over. You can leave testing the connection to the database to the integration testing, not the unit testing.\n\n# Test coverage\n\nTest coverage is the percentage of your code that has been tested. Test coverage is a very important metric. In some professional settings, you are not allowed to merge code if the coverage is not at least some percentage, typically around 75%.\n\nHow can you calculate test coverage in R? You use the `covr` package. From the console, run `covr::package_coverage()`.\n\n![100% test coverage! Do not try to chase 100% coverage in a real project, it is both impossible and of little value.](img/covr100.png)\n\nThe results above assume you have followed this tutorial and created all the functions and tests. You can verify what happens if you remove some tests. For instance, if you remove the tests for mocking, this is going to be the result:\n\n![Reduced coverage if we remove the mocking test.](img/covr66.png)\n\n# Wrap up\n\nIn this mini series on unit testing in R we saw how we can test our R code in a variety of different scenarios and using different techniques:\n\n* Basic unit testing building block: use `testthat`\n* Helper functions: use files in `tests/testthat` with the prefix `test-`.\n* Test fixtures: use `withr`.\n* Mocking: use `mockery`.\n* quantify test coverage: use `covr`.\n\nHopefully you are now able to test your code and demonstrate to yourself and other people that it works. Or that at least it does not fail.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}